// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.8
// source: xdsclient.proto

package xdsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义 Req 消息结构
type Require struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型 字段 = 标识号
	ClusterName     string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	UpstreamHost    string   `protobuf:"bytes,2,opt,name=upstreamHost,proto3" json:"upstreamHost,omitempty"`
	UpstreamPort    uint32   `protobuf:"varint,3,opt,name=upstreamPort,proto3" json:"upstreamPort,omitempty"`
	RouteName       string   `protobuf:"bytes,4,opt,name=routeName,proto3" json:"routeName,omitempty"`
	Domains         []string `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	Prefix          string   `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ListenerName    string   `protobuf:"bytes,7,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	ListenerPort    uint32   `protobuf:"varint,8,opt,name=listenerPort,proto3" json:"listenerPort,omitempty"`
	GrpcClusterName string   `protobuf:"bytes,9,opt,name=grpcClusterName,proto3" json:"grpcClusterName,omitempty"`
}

func (x *Require) Reset() {
	*x = Require{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xdsclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Require) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Require) ProtoMessage() {}

func (x *Require) ProtoReflect() protoreflect.Message {
	mi := &file_xdsclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Require.ProtoReflect.Descriptor instead.
func (*Require) Descriptor() ([]byte, []int) {
	return file_xdsclient_proto_rawDescGZIP(), []int{0}
}

func (x *Require) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Require) GetUpstreamHost() string {
	if x != nil {
		return x.UpstreamHost
	}
	return ""
}

func (x *Require) GetUpstreamPort() uint32 {
	if x != nil {
		return x.UpstreamPort
	}
	return 0
}

func (x *Require) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *Require) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Require) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Require) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *Require) GetListenerPort() uint32 {
	if x != nil {
		return x.ListenerPort
	}
	return 0
}

func (x *Require) GetGrpcClusterName() string {
	if x != nil {
		return x.GrpcClusterName
	}
	return ""
}

// 定义 Res 消息结构
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xdsclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_xdsclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_xdsclient_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_xdsclient_proto protoreflect.FileDescriptor

var file_xdsclient_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x78, 0x64, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x36, 0x0a, 0x09, 0x58, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a,
	0x0b, 0x2f, 0x3b, 0x78, 0x64, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xdsclient_proto_rawDescOnce sync.Once
	file_xdsclient_proto_rawDescData = file_xdsclient_proto_rawDesc
)

func file_xdsclient_proto_rawDescGZIP() []byte {
	file_xdsclient_proto_rawDescOnce.Do(func() {
		file_xdsclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_xdsclient_proto_rawDescData)
	})
	return file_xdsclient_proto_rawDescData
}

var file_xdsclient_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_xdsclient_proto_goTypes = []interface{}{
	(*Require)(nil),  // 0: Require
	(*Response)(nil), // 1: Response
}
var file_xdsclient_proto_depIdxs = []int32{
	0, // 0: XDSConfig.SetConfigToCache:input_type -> Require
	1, // 1: XDSConfig.SetConfigToCache:output_type -> Response
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_xdsclient_proto_init() }
func file_xdsclient_proto_init() {
	if File_xdsclient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xdsclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Require); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xdsclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xdsclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xdsclient_proto_goTypes,
		DependencyIndexes: file_xdsclient_proto_depIdxs,
		MessageInfos:      file_xdsclient_proto_msgTypes,
	}.Build()
	File_xdsclient_proto = out.File
	file_xdsclient_proto_rawDesc = nil
	file_xdsclient_proto_goTypes = nil
	file_xdsclient_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XDSConfigClient is the client API for XDSConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XDSConfigClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	SetConfigToCache(ctx context.Context, in *Require, opts ...grpc.CallOption) (*Response, error)
}

type xDSConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewXDSConfigClient(cc grpc.ClientConnInterface) XDSConfigClient {
	return &xDSConfigClient{cc}
}

func (c *xDSConfigClient) SetConfigToCache(ctx context.Context, in *Require, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/XDSConfig/SetConfigToCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XDSConfigServer is the server API for XDSConfig service.
type XDSConfigServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	SetConfigToCache(context.Context, *Require) (*Response, error)
}

// UnimplementedXDSConfigServer can be embedded to have forward compatible implementations.
type UnimplementedXDSConfigServer struct {
}

func (*UnimplementedXDSConfigServer) SetConfigToCache(context.Context, *Require) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigToCache not implemented")
}

func RegisterXDSConfigServer(s *grpc.Server, srv XDSConfigServer) {
	s.RegisterService(&_XDSConfig_serviceDesc, srv)
}

func _XDSConfig_SetConfigToCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Require)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XDSConfigServer).SetConfigToCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/XDSConfig/SetConfigToCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XDSConfigServer).SetConfigToCache(ctx, req.(*Require))
	}
	return interceptor(ctx, in, info, handler)
}

var _XDSConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "XDSConfig",
	HandlerType: (*XDSConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfigToCache",
			Handler:    _XDSConfig_SetConfigToCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xdsclient.proto",
}
